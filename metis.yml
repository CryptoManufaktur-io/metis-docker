x-logging: &logging
  logging:
    driver: json-file
    options:
      max-size: 100m
      max-file: "3"
      tag: '{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}'

services:
  init:
    restart: "no"
    build:
      context: ./init
      dockerfile: Dockerfile
    image: init:metis
    pull_policy: never
    volumes:
      - l1dtl-data:/data
      - l2geth-data:/root/.ethereum
    environment:
      - SNAPSHOT=${SNAPSHOT}
      - DTL_SNAPSHOT=${DTL_SNAPSHOT}

  l1dtl:
    image: metisdao/dtl:${DTL_IMAGE_TAG:-latest}
    restart: unless-stopped
    stop_grace_period: 5m
    volumes:
      - l1dtl-data:/data
    env_file:
      - ./l1dtl.env
    environment:
      - DATA_TRANSPORT_LAYER__L1_RPC_ENDPOINT=${DATA_TRANSPORT_LAYER__L1_RPC_ENDPOINT}
      - DATA_TRANSPORT_LAYER__L1_BEACON_ENDPOINT=${DATA_TRANSPORT_LAYER__L1_BEACON_ENDPOINT}
      - NODE_OPTIONS=${NODE_OPTIONS:---max-old-space-size=4096}
    depends_on:
      init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "curl http://127.0.0.1:7878"]
      interval: 5s
      timeout: 3s
      retries: 6
    <<: *logging

  l2geth:
    image: metisdao/l2geth:${L2GETH_IMAGE_TAG:-latest}
    restart: unless-stopped
    stop_grace_period: 5m
    env_file:
      - ./l2geth.env
    depends_on:
      l1dtl:
        condition: service_healthy
      init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "is-l2geth-stalled"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    environment:
      VERBOSITY: ${VERBOSITY:-3}
      PORT: ${L2GETH_P2P_PORT:-30303}
      GCMODE: ${GCMODE:-full}
    ports:
      - ${L2GETH_P2P_PORT:-30303}:${L2GETH_P2P_PORT:-30303}/udp
      - ${L2GETH_P2P_PORT:-30303}:${L2GETH_P2P_PORT:-30303}/tcp
    volumes:
      - l2geth-data:/root/.ethereum
    command:
      - --cache.noprefetch
    <<: *logging
    labels:
      - traefik.enable=true
      - traefik.http.routers.metis-l2geth.service=metis-l2geth
      - traefik.http.routers.metis-l2geth.entrypoints=websecure
      - traefik.http.routers.metis-l2geth.rule=Host(`${L2GETH_HOST}.${DOMAIN}`)
      - traefik.http.routers.metis-l2geth.tls.certresolver=letsencrypt
      - traefik.http.routers.metis-l2gethlb.service=metis-l2geth
      - traefik.http.routers.metis-l2gethlb.entrypoints=websecure
      - traefik.http.routers.metis-l2gethlb.rule=Host(`${L2GETH_LB}.${DOMAIN}`)
      - traefik.http.routers.metis-l2gethlb.tls.certresolver=letsencrypt
      - traefik.http.services.metis-l2geth.loadbalancer.server.port=8545
      - traefik.http.routers.metis-l2gethws.service=metis-l2gethws
      - traefik.http.routers.metis-l2gethws.entrypoints=websecure
      - traefik.http.routers.metis-l2gethws.rule=Host(`${L2GETH_WS_HOST}.${DOMAIN}`)
      - traefik.http.routers.metis-l2gethws.tls.certresolver=letsencrypt
      - traefik.http.routers.metis-l2gethwslb.service=metis-l2gethws
      - traefik.http.routers.metis-l2gethwslb.entrypoints=websecure
      - traefik.http.routers.metis-l2gethwslb.rule=Host(`${L2GETH_WS_LB}.${DOMAIN}`)
      - traefik.http.routers.metis-l2gethwslb.tls.certresolver=letsencrypt
      - traefik.http.services.metis-l2gethws.loadbalancer.server.port=8546

  metis-replica-healthcheck:
    image: ethereumoptimism/replica-healthcheck:${HC_IMAGE_TAG:-latest}
    restart: unless-stopped
    environment:
      HEALTHCHECK__REFERENCE_RPC_PROVIDER: ${HEALTHCHECK__REFERENCE_RPC_PROVIDER}
      HEALTHCHECK__TARGET_RPC_PROVIDER: ${HEALTHCHECK__TARGET_RPC_PROVIDER}
      REPLICA_HEALTHCHECK__ETH_NETWORK: ${REPLICA_HEALTHCHECK__ETH_NETWORK}
    <<: *logging
    labels:
      - traefik.enable=true
      - traefik.http.routers.metis-l2gethhealth.service=metis-l2gethhealth
      - traefik.http.routers.metis-l2gethhealth.entrypoints=websecure
      - traefik.http.routers.metis-l2gethhealth.rule=Host(`${L2GETH_HEALTH_HOST}.${DOMAIN}`)
      - traefik.http.routers.metis-l2gethhealth.tls.certresolver=letsencrypt
      - traefik.http.services.metis-l2gethhealth.loadbalancer.server.port=7300

volumes:
  l1dtl-data:
  l2geth-data:
